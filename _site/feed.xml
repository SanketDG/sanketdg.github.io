<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SanketDG</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Nov 2017 01:03:15 +0530</pubDate>
    <lastBuildDate>Mon, 13 Nov 2017 01:03:15 +0530</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>GSoC Mentoring Phase 1 Progress</title>
        <description>&lt;p&gt;Phase 1 of GSoC has come to an end, and it has been an awesome one month of work
for Saurav.&lt;/p&gt;

&lt;p&gt;First and foremost, DocumentationStyleBear got merged after almost a year of
work. There are still quirks inside it, but it works for now.&lt;/p&gt;

&lt;p&gt;Phase 2 deals with creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;DocBaseClass&lt;/code&gt;, that acts essentially as a
umbrella class for documentation related bears, where common functionality is
abstracted away to this class and the core functionality of the bear is left
upon the user to implement.&lt;/p&gt;

&lt;p&gt;Then after the &lt;code class=&quot;highlighter-rouge&quot;&gt;DocBaseClass&lt;/code&gt; is ready, its time to port the DocumentationStyleBear
to the new framework.&lt;/p&gt;

&lt;p&gt;As for the quirks of &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationStyleBear&lt;/code&gt; itself, there are some bugs to be fixed
&lt;a href=&quot;https://github.com/coala/coala/issues/4029&quot;&gt;#4029&lt;/a&gt;, &lt;a href=&quot;https://github.com/coala/coala-bears/issues/1856&quot;&gt;#1856&lt;/a&gt;, &lt;a href=&quot;https://github.com/coala/coala/issues/4200&quot;&gt;#4200&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Jul 2017 09:26:00 +0530</pubDate>
        <link>http://localhost:4000/phase-1/</link>
        <guid isPermaLink="true">http://localhost:4000/phase-1/</guid>
        
        <category>gsoc</category>
        
        <category>mentoring</category>
        
        <category>documentation</category>
        
        
      </item>
    
      <item>
        <title>GSoC Mentoring Starts</title>
        <description>&lt;p&gt;So this year, I am mentoring &lt;a href=&quot;https://github.com/damngamerz&quot;&gt;Saurav&lt;/a&gt; for the gsoc project, &lt;a href=&quot;http://projects.coala.io/#/projects?project=documentation_extraction_and_parsing&quot;&gt;Documentation
Extraction and Parsing&lt;/a&gt;, which basically continues the work from my last year’s
project.&lt;/p&gt;

&lt;p&gt;Last year’s project consisted of revamping the documentation extraction API and
creating a language-independent class that parses documentation.&lt;/p&gt;

&lt;p&gt;A bear was also planned, but it never got merged because of some regressions.&lt;/p&gt;

&lt;p&gt;Saurav’s work is to first get a working &lt;a href=&quot;https://github.com/coala/coala-bears/pull/1506&quot;&gt;DocumenatationStyleBear&lt;/a&gt; merged. By
working, it means it should work as intended on the main coala repos. For
keeping it simple, only Python is being supported right now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://githubcom/NiklasMM&quot;&gt;Niklas&lt;/a&gt; has been a lot of help. I can’t begin to say how he has been very
welcoming to both of us, and also has familiarized himself with the
documentation parsing codebase in a few days despite being a few days, and has
done a lot of code reviews.&lt;/p&gt;

&lt;p&gt;I hope, with Saurav’s commitment and Niklas’ guidance, we can get the
documentation extraction and parsing working as a proof of concept for atleast
two languages.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Jun 2017 09:26:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-mentoring/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-mentoring/</guid>
        
        <category>gsoc</category>
        
        <category>bonding</category>
        
        <category>documentation</category>
        
        <category>mentoring</category>
        
        
      </item>
    
      <item>
        <title>That's it, folks!</title>
        <description>&lt;p&gt;So this is it. The end of my Google Summer of Code. An amazing 12 weeks of
working on a &lt;em&gt;real&lt;/em&gt; project with &lt;em&gt;deadlines&lt;/em&gt; and &lt;em&gt;milestones&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;thanks-awesome-mentor&quot;&gt;Thanks, awesome mentor!&lt;/h3&gt;

&lt;p&gt;First and foremost, I would like to thank my mentor &lt;a href=&quot;https://github.com/Makman2&quot;&gt;Mischa Krüger&lt;/a&gt; for his
constant guidance and support through the tenure of my project.&lt;/p&gt;

&lt;p&gt;Thank you for clarifying my trivial issues that were way too trivial.
Thank you for clearing my doubts on the design of the classes.
Thank you for writing a basic layout for a prototype bear.
Thank you for understanding when I was not able to meet certain deadlines.
Thank you Mischa for being an awesome mentor.&lt;/p&gt;

&lt;h3 id=&quot;the-beginning&quot;&gt;The Beginning&lt;/h3&gt;

&lt;p&gt;I was first introduced to coala in &lt;a href=&quot;https://www.hackerearth.com/sprints/open-source-india-hacks-2016/&quot;&gt;HackerEarth IndiaHacks Open Source Hackathon&lt;/a&gt;.
I wanted to participate in it, so I took a look at the list of projects and saw
coala. I jumped on their gitter channel and said &lt;em&gt;hi&lt;/em&gt;. Lasse hit me back instantly,
introduced me to the project, asked me to choose any newcomer issue, and my first
patch got &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/1195&quot;&gt;accepted&lt;/a&gt; in no time.&lt;/p&gt;

&lt;p&gt;As the hackathon came to an end, it was time for organisations to start thinking
about Google Summer of Code. By then, I had been taking part in regular discussions, and code reviews, Lasse asked me if I’d like to do a GSoC:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QbLSmwH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I slowly pivoted to choosing &lt;em&gt;language independent documentation extraction&lt;/em&gt;
as my GSoC project as I found it having greater depth than my other choices.&lt;/p&gt;

&lt;p&gt;I feel privileged to be contributing to coala. The project itself is awesome
in its entirety. I have contributed to my fair share of open source projects
and I have never found any other project that is so organized and newcomer
friendly. How coala is awesome should be itself another post.&lt;/p&gt;

&lt;h3 id=&quot;about-my-project&quot;&gt;About my project&lt;/h3&gt;

&lt;p&gt;Now to my project. As stated repeatedly in my past posts, my project was to
build a language independent documentation extraction and parsing library, and use
it to develop bears (static analyzing routines.)&lt;/p&gt;

&lt;h3 id=&quot;how-it-all-fits-together&quot;&gt;How it all fits together&lt;/h3&gt;

&lt;p&gt;Most of the documentation extraction routines were already &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationExtraction.py&quot;&gt;written&lt;/a&gt; by my
mentor. Except a couple of tiny bugs, it worked pretty well. The documentation
extraction API was responsible for extracting the documentation given the
language, docstyle and markers and return a &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py#L9&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt;&lt;/a&gt; class defines one documentation comment along with
its language, docstyle, markers, indentation and range.&lt;/p&gt;

&lt;p&gt;My first task was to write a language independent parsing routine that
would extract metadata out of a documentation i.e. description,
parameter and return information. This &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py#L79&quot;&gt;resides&lt;/a&gt; inside the
&lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The point of this parsing library is to allow bear developers manipulate
metadata without worrying about destroying the format.&lt;/p&gt;

&lt;p&gt;I then had to make sure that I had support for the most popular languages.
I used the unofficial &lt;code class=&quot;highlighter-rouge&quot;&gt;coalang&lt;/code&gt; specification to &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/default.coalang#L3-L5&quot;&gt;define&lt;/a&gt; keywords and symbols
that are used in different documentation comments. They are being &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocstyleDefinition.py#L181-L184&quot;&gt;loaded&lt;/a&gt; along
with the docstyle.&lt;/p&gt;

&lt;p&gt;Although I do not use the &lt;code class=&quot;highlighter-rouge&quot;&gt;coalang&lt;/code&gt; stuff yet and still pass keywords and
symbols &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py#L65&quot;&gt;manually&lt;/a&gt;, it will be used in future.&lt;/p&gt;

&lt;p&gt;Lastly, I had to implement a function to assemble a parsed documentation
into a documentation comment.&lt;/p&gt;

&lt;p&gt;I separated this functionality into two functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py#L146&quot;&gt;first&lt;/a&gt; function would take in a list of parsed documentation comment
metadata and construct a &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; object from that. The
object would contain the assembled documentation comment and its other
characteristics. Note that this just assembles the inside of the
documentation comment, not accounting for the indentation and markers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py#L201&quot;&gt;second&lt;/a&gt; function takes this &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; object and assembles it
into a documentation comment, as it should be, taking account of the indentation
and the markers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;difficulties-faced&quot;&gt;Difficulties faced&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The first difficulty I faced was the design of the parsing module itself.
With the help of my mentor, I was able to sort that out. We decided on
using namedtuples for each of the metadata:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parameter = namedtuple('Parameter', 'name, desc')
ReturnValue = namedtuple('ReturnValue', 'desc')
Description = namedtuple('Description', 'desc')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If I wanted to make the library completely language independent, most settings
would have to be configurable to the end user. Initially I hardcoded the keywords
and symbols that I used, but later the coalang specification was used to define
the settings. They are yet to be used in the library.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While trying to use the above mentioned settings, I realized that the settings
extraction didn’t work for trailing spaces. Since I had to have settings with
trailing whitespace, I had to fix the extraction in the &lt;code class=&quot;highlighter-rouge&quot;&gt;LineParser&lt;/code&gt; class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-has-been-done-till-now&quot;&gt;What has been done till now&lt;/h3&gt;

&lt;h4 id=&quot;coala&quot;&gt;coala&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/56e1802&quot;&gt;56e1802&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Add language, docstyle param&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/72b6c9c&quot;&gt;72b6c9c&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Add indent param&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/bc4d7d0&quot;&gt;bc4d7d0&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Parse python docstrings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/337b7c1&quot;&gt;337b7c1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Parse python doxygen docs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/99fa059&quot;&gt;99fa059&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationCommentTest: Refactor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/fc2e3bf&quot;&gt;fc2e3bf&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Add JavaDoc parsing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/12ede4f&quot;&gt;12ede4f&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;ConsoleInteraction: Fix empty line tab display&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/07135f5&quot;&gt;07135f5&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationExtraction: Fix newline parsing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/5df5932&quot;&gt;5df5932&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Fix python parsing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/f731ee4&quot;&gt;f731ee4&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Remove redundant code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/e442dce&quot;&gt;e442dce&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;TestUtils: Create load_testdata for loading docs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/7de9aed&quot;&gt;7de9aed&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;LineParser: Fix stripping for escaped whitespace&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/31b0410&quot;&gt;31b0410&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocstyleDefinition: Add metadata param&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/edc67aa&quot;&gt;edc67aa&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationExtraction: Conform to pep8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/3a78aa9&quot;&gt;3a78aa9&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Use DocstyleDefinition&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/dc35a0a&quot;&gt;dc35a0a&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Add from_metadata()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/78ff315&quot;&gt;78ff315&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;DocumentationComment: Add assemble()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/coala-analyzer/coala/commit/3c239d7&quot;&gt;3c239d7&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;setup: Package coalang files&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-lies-ahead&quot;&gt;What lies ahead&lt;/h2&gt;

&lt;p&gt;The API still has a long way to go. A lot of things can be added/improved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Maybe the use of namedtuples is not that efficient. I think classes should be used and subclassed from these namedtuples. This will allow the API to be way
more flexible than it currently is, and also retaining the advantages with using
namedtuple.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A cornercase in assembling &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2645&quot;&gt;#2645&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Range is not being calculated correctly. &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2646&quot;&gt;#2646&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The API is not using the coalang symbols/keywords. &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2629&quot;&gt;#2629&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A lot of things are just assumed from the documentation while parsing.
Related: &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2143&quot;&gt;#2143&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trivial: &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2617&quot;&gt;#2617&lt;/a&gt;, &lt;a href=&quot;https://github.com/coala-analyzer/coala/issues/2616&quot;&gt;#2616&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A lot of documentation related bears can be developed from this API.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has been an awesome 3 months and an even more awesome 7 months of contributing
to coala. That’s it folks!&lt;/p&gt;

&lt;h3 id=&quot;other-projects&quot;&gt;Other projects.&lt;/h3&gt;

&lt;p&gt;Also, I want to talk about the projects of other students:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hypothesist&quot;&gt;@hypothesist&lt;/a&gt; did an awesome job on &lt;a href=&quot;https://github.com/coala-analyzer/coala-quickstart&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt;&lt;/a&gt;. The time saved in using
&lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt; vs. writing your own &lt;code class=&quot;highlighter-rouge&quot;&gt;.coafile&lt;/code&gt; is huge and this will lead to
more projects using coala. He has also worked on caching files to speed up &lt;code class=&quot;highlighter-rouge&quot;&gt;coala&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tushar-rishav&quot;&gt;@tushar-rishav&lt;/a&gt; built &lt;a href=&quot;https://github.com/coala-analyzer/coala-html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coala-html&lt;/code&gt;&lt;/a&gt;! Its a web app for showing your coala results.
He has also been working on a new &lt;a href=&quot;https://gitlab.com/coala/website/&quot;&gt;website&lt;/a&gt; for coala.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/mr-karan&quot;&gt;@mr-karan&lt;/a&gt; did some cool &lt;a href=&quot;https://gitlab.com/coala/website/&quot;&gt;documentation&lt;/a&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;bears&lt;/code&gt; and implemented syntax
highlighting in the terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Adrianzatreanu&quot;&gt;@Adrianzatreanu&lt;/a&gt; worked on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Requirements&lt;/code&gt; API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Redridge&quot;&gt;@Redridge&lt;/a&gt;’s work on &lt;code class=&quot;highlighter-rouge&quot;&gt;External Bears&lt;/code&gt; will help you &lt;a href=&quot;http://coala.readthedocs.io/en/latest/Users/Tutorials/External_Bears.html&quot;&gt;write&lt;/a&gt; bears in your
favourite programming language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/abhsag24&quot;&gt;@abhsag24&lt;/a&gt; worked on the &lt;code class=&quot;highlighter-rouge&quot;&gt;coalang&lt;/code&gt; specification. We can finally integrate
language independent bears seamlessly!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/arafsheikh&quot;&gt;@arafsheikh&lt;/a&gt;, you can now &lt;a href=&quot;https://github.com/coala-analyzer/coala-eclipse&quot;&gt;use&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;coala&lt;/code&gt; in Eclipse.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 21 Aug 2016 23:00:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-final-report/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-final-report/</guid>
        
        <category>gsoc</category>
        
        <category>coala</category>
        
        
      </item>
    
      <item>
        <title>Things that needed fixing.</title>
        <description>&lt;p&gt;This week I am going to talk about the things that I have been working on,
mainly on &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423&quot;&gt;PR #2423&lt;/a&gt;. This is the second last week of GSoC and I fixed a
lot of quirks that I was facing for the first two weeks.&lt;/p&gt;

&lt;p&gt;The first one deals with opinionated documentation styles. Most projects
follow this style of documentation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:param x:           blablabla
:param muchtoolong: blablabla
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While this format is used in most projects, it requires a lot of maintainance (and patience). One extra line or a few extra words and you have to literally “re-design” the entire documentation comment. But there’s another life-saving
style though.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:param x:
    blablabla
:param muchtoolong:
    blablabla
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I was writing the parsing algorithm for extracting documentation metadata,
I had completely forgotten about this style, and thus when I took the algorithm for
a test drive, it indeed failed. The bug and the solution were both simple. The
algorithm expects a space after the metadata symbols, which wouldn’t ideally
happen in the second style. Thus, &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/6eb9ee0354371662bc2fba2fcead7cbec8cf20a6&quot;&gt;removing&lt;/a&gt; the space clearly solves the problem and
parses everything correctly. This affects parsing of the first style in a small way,
where we now have to account for an extra space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the future&lt;/strong&gt;: I am hoping to improve this, the current process of
searching for strings is not the most effecient way, I am thinking of
slowly transitioning to regex for this.&lt;/p&gt;

&lt;p&gt;Another tiny bug that I found was in the documentation extraction algorithms that were
already implemented by my mentor &lt;a href=&quot;https://github.com/Makman2&quot;&gt;@Makman2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To talk about this, I need to explain what a documentation marker means in my project.
Its basically a 3-element tuple of strings that define how a documentation comment starts,
continues and ends.&lt;/p&gt;

&lt;p&gt;So for a python docstring it would look something like &lt;code class=&quot;highlighter-rouge&quot;&gt;('&quot;&quot;&quot;', '', '&quot;&quot;&quot;')&lt;/code&gt;.
For javadoc, it would look like &lt;code class=&quot;highlighter-rouge&quot;&gt;('/**', ' *', ' */')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the bug was that for documentation comments that were identified with no middle marker
i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;marker[1] = ''&lt;/code&gt;, it was completely ignoring lines that only contained a &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; i.e.
an empty line. This would lead to wrong parsing. The &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/edf9f3e443fd4f758ecb80a48318237fd7723fae&quot;&gt;solution&lt;/a&gt;  (for now) was a simple
if-statement to insert a newline if it found a empty line.&lt;/p&gt;

&lt;p&gt;Also, I &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/a3c5187bf4943480938c7169fe575d70d8ec65c2&quot;&gt;fixed&lt;/a&gt; Escaping. Although I am still not sure that the solution is bulletproof and
would work for all cases, it’s good enough. Also, turns out that I have been doing the
setting extraction wrong, getting the escaped value (and not the unescaped one).&lt;/p&gt;

&lt;p&gt;Also, I removed some code! As a developer, it feels great to remove more and more lines of code
that you don’t need. First, I &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/edf9f3e443fd4f758ecb80a48318237fd7723fae&quot;&gt;removed&lt;/a&gt; a relatively useless exception handling in the
parsing algorithm.&lt;/p&gt;

&lt;p&gt;Second, I &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/99be48f18a88bb24d79b39d1e056295d725a55af&quot;&gt;moved&lt;/a&gt; one of the functions that loaded a file and returned its lines as a list.
It was being used in the testing classes. It was being used in three separate files,
and thus was moved to a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils.py&lt;/code&gt;, from where it was then used.
&lt;strong&gt;REFACTOR EVERYTHING!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lastly, now &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/19b36f847c6e2f6edaa1d7eec9ede44db31c6178&quot;&gt;requires&lt;/a&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;DocstyleDefinition&lt;/code&gt; object, instead of
language and docstyle (which I always thought was redundant). This kind of falls in refactoring,
and thus more removing!&lt;/p&gt;

&lt;p&gt;Coming to things that were added, I finalized the design of the assembling functions,
with the help of my mentor. So we decided on having two functions. One constructor-like &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/1f2c93510552948c4ac9301303751fb1255fd498&quot;&gt;function&lt;/a&gt;
that would just arrange the documentation text from the parsed documentation metadata. So it
wouldn’t be responsible for the markers and indentation. It returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt;
object that contains all the required things for the final assembling. This function could
sometimes act like a constructor, where it takes parsed metadata and spits out a readymade
DocumentationComment object ready for use.&lt;/p&gt;

&lt;p&gt;The final assembling function just &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/cdc885c0a8ed682a3c47ff743eefba5edcde4123&quot;&gt;assembles&lt;/a&gt; the documentation taking into account the markers
and indentation. It returns the assembled documentation comment as a string that can be
added/updated in files. While developing this, I actually found out that my algorithm for
doing this was totally buggy and would not work for a lot of corner cases, so I am in the
process of working them out.&lt;/p&gt;

&lt;p&gt;Also, on a side note, I &lt;a href=&quot;https://github.com/coala-analyzer/coala/pull/2423/commits/37b58ec79cec702e1b2c40ecfda30181a53118d3&quot;&gt;figured&lt;/a&gt; out the metadata settings. This is important, because its
important to implement some variable functionality as settings, because it imparts freedom
to the user to define what they want to parse. Right now, the concept is at its infancy,
for example, settings for a conventional python docstring would like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;param_start = :param\ # here's a space
param_end = :
return_sep = :return:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s all for this blog post, I guess. I am almost done with the work
in the core repo. I can finally start developing some cool bears!&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 23:00:00 +0530</pubDate>
        <link>http://localhost:4000/things-that-needed-fixing/</link>
        <guid isPermaLink="true">http://localhost:4000/things-that-needed-fixing/</guid>
        
        <category>gsoc</category>
        
        <category>documentation</category>
        
        
      </item>
    
      <item>
        <title>Escaping!</title>
        <description>&lt;p&gt;So, escaping.&lt;/p&gt;

&lt;p&gt;So, for configuration parsing, escaping is a big thing.&lt;/p&gt;

&lt;p&gt;So, for &lt;code class=&quot;highlighter-rouge&quot;&gt;coala&lt;/code&gt;’s config parsing, it looks like having
whitespace at the end of a value is forbidden. The whole
codebase makes sure of that!&lt;/p&gt;

&lt;p&gt;So, for this week, I am going to try to solve that.&lt;/p&gt;

&lt;p&gt;So, at first, I have to make sure that the whitespace
doesn’t get stripped while parsing. The whitespace will be escaped
at first. The second stripping happens after the unescaping,
for which I have to make sure that it only happens if the
last character is not escaped.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 23:00:00 +0530</pubDate>
        <link>http://localhost:4000/config-related-problems/</link>
        <guid isPermaLink="true">http://localhost:4000/config-related-problems/</guid>
        
        <category>gsoc</category>
        
        
      </item>
    
      <item>
        <title>textwrap's my man!</title>
        <description>&lt;p&gt;So I just discovered &lt;a href=&quot;https://docs.python.org/3/library/textwrap.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;textwrap&lt;/code&gt;&lt;/a&gt;!
Turns out, its the perfect thing I need for formatting my documentation under a
certain line limit.&lt;/p&gt;

&lt;p&gt;Remember how I talked about supporting two different documentation styles in my
previous post? Well both kinds of formatting needs to have a upper line length
limit.&lt;/p&gt;

&lt;p&gt;So a typical documentation comment consists of a lot of descriptions. These can
be of one line or extend to paragraphs. But it’s important that the length
of these descriptions be kept in check.&lt;/p&gt;

&lt;p&gt;So what we need to do, is to somehow &lt;em&gt;“wrap”&lt;/em&gt; a paragraph of text to &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; lines,
where &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; could have a default value or could be specified by the user.
Turns out you can do that to paragraphs using the &lt;code class=&quot;highlighter-rouge&quot;&gt;textwrap&lt;/code&gt; module. I have
recorded it below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/6zltnywo6c5gkwlbck1d0h11r&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/6zltnywo6c5gkwlbck1d0h11r.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This really simplifies my work for the &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationFormatBear&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 23:00:00 +0530</pubDate>
        <link>http://localhost:4000/textwrap/</link>
        <guid isPermaLink="true">http://localhost:4000/textwrap/</guid>
        
        <category>gsoc</category>
        
        <category>textwrap</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Summer of Code Midterm Updates</title>
        <description>&lt;p&gt;Talking about short updates, I have successfully
completed parsing routines for Python and Java.
My next task would be to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;coalang&lt;/code&gt; functionality to implement
parsing routines which are completely implicit and to provide support
for C and C++ documentation styles.&lt;/p&gt;

&lt;p&gt;So instead of passing the parameter and return symbols as strings through a
function, they would be extracted from the coalang files. A strong API
to access coalang files would help here.&lt;/p&gt;

&lt;p&gt;Support for multiple params also need to be kept in mind. A documentation
style can support many type of formats.&lt;/p&gt;

&lt;p&gt;After this is done, I will start working on the big thing i.e.
&lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationBear&lt;/code&gt;! The first feature of capitalizing sentences has
been already implemented (needs a little bit of improvement.)&lt;/p&gt;

&lt;p&gt;The second thing to do is to implement checking the docs against a
specified style. This can be done in two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first one involves the user supplying a regex to check against
the documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another way would be to define some predefined styles that are generally
followed as conventions in most projects, and then check them against the
documentation. For example for python docstrings, two conventions seem to
rule:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:param x:          blablabla
:param muchtolong: blablabla
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:param x:
    blablabla
:param muchtolong:
    blablabla
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Supporting these two conventions as predefined styles would avoid most
projects writing a complex regex.&lt;/p&gt;

&lt;p&gt;Then I would go forward with more functionality like indentation checking
and wrapping of characters in a long line to subsequent lines. I will also
check for grammar within documentation!&lt;/p&gt;

&lt;p&gt;If there is time available after all this, I would go forward with refactoring
all the classes related with documentation extraction and improve the parsing
routines to make them more dynamic. I would also like to tackle the problem where
languages and docstyles have different fields for extracting, not only the current
three(description, parameters and return values).&lt;/p&gt;

&lt;p&gt;On a final note, I have a issue tracker at &lt;a href=&quot;https://gitlab.com/coala/GSoC2016/issues?scope=all&amp;amp;sort=id_desc&amp;amp;state=opened&amp;amp;utf8=%E2%9C%93&amp;amp;milestone_title=Documentation+Extraction&quot;&gt;GitLab&lt;/a&gt;. Also, to help me organize
my work, I have opened a public Trello &lt;a href=&quot;https://trello.com/b/corsZ0pn/gsoc-2016-documentation-extraction&quot;&gt;board&lt;/a&gt;. The board is empty right now,
but I will start filling it up from tomorrow.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Jun 2016 03:00:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-midterm-updates/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-midterm-updates/</guid>
        
        <category>gsoc</category>
        
        <category>documentation</category>
        
        
      </item>
    
      <item>
        <title>Summer of Code Week 2</title>
        <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;This is Week 2 of my Google Summer of Code project. In this week, I will
talk about &lt;strong&gt;why documentation is important&lt;/strong&gt; and show you a simple
&lt;strong&gt;bear&lt;/strong&gt; that capitalizes every uncapitalized sentence. (I know!, right?)&lt;/p&gt;

&lt;p&gt;When we talk about documentation in a codebase, we generally mean
documentation of objects, i.e. of classes and functions. This helps
future hackers to get started easily with the codebase.
The general convention is to give a brief explanation of the object,
describe the parameters it takes and what it returns. Does this work?&lt;/p&gt;

&lt;p&gt;Generally, yes. Most projects do this, and it should work. But the
right question to ask, &lt;strong&gt;“Is it for humans?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is why hand-written documentation is important. I personally
think a right-mix of generated API documentation and hand crafted
documentation works well. This is what we do at &lt;a href=&quot;http://coala.readthedocs.io/en/latest/&quot;&gt;coala&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The bear I wanted to talk about doesn’t do much
right now, but the key takeaway was that I was able to successfully
parse the documentation, analyze and manipulate each section, and
assemble back the documentation. I have recorded a small asciinema
to demonstrate this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/6hffypg4f1w5qqkh4ndhc3dqq&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/6hffypg4f1w5qqkh4ndhc3dqq.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Jun 2016 23:00:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-week-2/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-week-2/</guid>
        
        <category>gsoc</category>
        
        <category>documentation</category>
        
        
      </item>
    
      <item>
        <title>Summer of Code Week 1</title>
        <description>&lt;p&gt;So as I said in my previous blog post, I am working with
&lt;a href=&quot;http://coala-analyzer.org&quot;&gt;coala&lt;/a&gt; for language independent
documentation extraction for this year’s Google Summer of
Code.&lt;/p&gt;

&lt;p&gt;It has been one week since the coding period has started,
and there has been some work done! I would like to explain
some stuff before we get started on the real work.&lt;/p&gt;

&lt;p&gt;So, my project deals with language independent documentation
extraction. Turns out, documentation isn’t that independent
of the language. Most programming languages don’t have an
official documentation specification. But It could be said that
documentation is independent of the documentation standard
(hereby referred to as &lt;code class=&quot;highlighter-rouge&quot;&gt;docstyle&lt;/code&gt;) it uses.&lt;/p&gt;

&lt;p&gt;I have to extract parts/metadata from the documentation
like descriptions, parameters and their descriptions, return
descriptions and perform various analyzing routines on this
parsed metadata.&lt;/p&gt;

&lt;p&gt;Most of my work is with the &lt;a href=&quot;https://github.com/coala-analyzer/coala/blob/master/coalib/bearlib/languages/documentation/DocumentationComment.py&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt;&lt;/a&gt; class,
where I have to implement routines for each language/docstyle.
I started out with &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; first because of two reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Its my favourite programming language (Duh!)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coala&lt;/code&gt; is written in &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;! (Duh again!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; has its own docstyle, that is known
as “docstrings”, and they are clearly defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0257/&quot;&gt;PEP 257&lt;/a&gt;.
Note that PEP 257 is just a general styleguide on how to write
docstrings.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The PEP contains conventions, not laws or syntax&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;It is not a specifictaion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Several documentation tools support compiling these docstrings
into API documentation like &lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; and &lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/&quot;&gt;Doxygen&lt;/a&gt;.
I aim to support both of them.&lt;/p&gt;

&lt;p&gt;So, I have come up with the following signature for &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
DocumentationComment(documentation, language, docstyle, indent, marker, range)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let’s say &lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt; would have a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_documentation()&lt;/code&gt; that
would do the parsing and get the metadata. So if I have a function
with a docstring:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;best_docstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        This is the best docstring ever!

        :param param1:
            Very Very Long Parameter description.
        :param param2:
            Short Param description.

        :return: Long Return Description That Makes No Sense And Will
                 Cut to the Next Line.
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And I load this into the &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentationComment&lt;/code&gt; class and then apply the parsing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;coalib.bearlib.languages.documentation.DocumentationComment&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DocumentationComment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DocumentationComment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_docstring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;docstyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_documentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Note: Not all parameters are required for instantation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now printing &lt;code class=&quot;highlighter-rouge&quot;&gt;repr(docdata)&lt;/code&gt; would print:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;This is the best docstring ever!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'param1:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'    Very Very Long Parameter description.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'param2:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'    Short Param description.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RetVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Long Return Description That Makes No Sense'&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;' And Will&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;         Cut to the Next Line.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may ask about the strange formatting. That is because it retains the exact
formatting, as displayed in the docstring. This is important, because whatever
analyzing routines I run, I should always be able to “assemble” back to the
original docstring.&lt;/p&gt;

&lt;p&gt;That’s it! This was my milestone for week 1, to parse and extract metadata out
of python docstrings! I have already started developing a simple Bear, that I
will talk about later this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS: I would &lt;em&gt;really&lt;/em&gt; like to thank my mentor &lt;a href=&quot;https://github.com/Makman2&quot;&gt;Mischa Krüger&lt;/a&gt; for his thoughts
on the API design and for doing reviews on my ugly code. :P&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 30 May 2016 02:00:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-week-1/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-week-1/</guid>
        
        <category>gsoc</category>
        
        <category>coala</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>GSoC 2016, here I come!</title>
        <description>&lt;p&gt;So, I am participating in GSoC 2016 with
&lt;a href=&quot;http://coala-analyzer.org&quot;&gt;coala&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;My proect is based on language independent documentation extraction,
which will involve parsing embedded documentation within code
and separate them into description, parameters and return values
(even doctests!).&lt;/p&gt;

&lt;p&gt;After this is done for several languages(Python, C, C++, Java, PHP),
I will implement the following as the functionality of a bear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Documentation Style checking as specified by the user.&lt;/li&gt;
  &lt;li&gt;Providing aesthetic and grammar fixes.&lt;/li&gt;
  &lt;li&gt;Re-formats the documentation (indentation and spacing)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Apr 2016 16:02:00 +0530</pubDate>
        <link>http://localhost:4000/gsoc-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/gsoc-2016/</guid>
        
        <category>gsoc</category>
        
        <category>coala</category>
        
        
      </item>
    
  </channel>
</rss>
